trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  apiToken: 'trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  apiToken: '8bBLgigxgRMWRhWTOmOLtvMIyurl6z'
  projectId: '9cf60efb-c360-4f96-92df-64c5149243de'
  suiteId: '9cf60efb-c360-4f96-92df-64c5149243de'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    version: '3.x'

- task: HttpRest@1
  displayName: 'Make API call - Run E2E test suite'
  inputs:
    connectionType: 'connectedServiceNameARM'
    connectedServiceNameSelector: 'ConnectedServiceName'
    method: 'POST'
    authentication: 'Basic'
    customHeaders: |
      Accept: application/json
      Content-Type: application/json
      x-api-token: $(apiToken)
    endpoint: '<YOUR_SERVICE_CONNECTION_NAME>'  # Replace with the name of your service connection
    urlSuffix: '/suites/execute'
    body: |
      {
          "project_id": "$(projectId)",
          "suite_id": "$(suiteId)",
          "strategy": "await"
      }
'
  projectId: '<PROJECT ID>'
  suiteId: '<SUITE ID>'

steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    version: '3.x'

- task: HttpRest@1
  displayName: 'Make API call - Run E2E test suite'
  inputs:
    connectionType: 'connectedServiceNameARM'
    connectedServiceNameSelector: 'ConnectedServiceName'
    method: 'POST'
    authentication: 'Basic'
    customHeaders: |
      Accept: application/json
      Content-Type: application/json
      x-api-token: $(apiToken)
    endpoint: '<YOUR_SERVICE_CONNECTION_NAME>'  # Replace with the name of your service connection
    urlSuffix: '/suites/execute'
    body: |
      {
          "project_id": "$(projectId)",
          "suite_id": "$(suiteId)",
          "strategy": "await"
      }
      
# This is a basic workflow to help you get started with Actions

name: CI with Scandium

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Run Scandium Test
        run: |
          response=$(curl -X POST -H "Content-Type: application/json" -H "x-api-token: ${{ vars.API_TOKEN }}" -d '{"project_id": "${{ vars.PROJECT_ID }}", "test_id": "${{ vars.TEST_ID }}","browser": "chrome","screenshot": true,"strategy": "await","variables": {"username": "sdk", "age": 11},"retry": 0}' "https://scr.getscandium.com/tests/execute")
          status=$(echo "$response" | jq -r .data.result.status)
          message=$(echo "$response" | jq -r .message)

          if [ "$status" = "success" ]; then
            echo "Test ran successfully. Status: $status"
          else
            echo "Test ran with failure. Status: $status"
            exit 1
          fi
        env:
          CURL_CA_BUNDLE: /etc/ssl/certs/ca-certificates.crt # Set the CA certificates bundle path

      # - name: Install jq
      #   run: |
      #     sudo apt-get update -y
      #     sudo apt-get install -y jq
